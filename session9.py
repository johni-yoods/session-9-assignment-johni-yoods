# -*- coding: utf-8 -*-
"""session9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FJA-bEYmQ5D7UqQ-mR2Ujw-LVVacjSAu
"""


from faker import Faker
from collections import namedtuple
import random, string
import datetime
fake = Faker()
from time import perf_counter

"""**Random Profiles - Named tuples**"""

#1 generate random profiles using faker library. Process the data using named tuple
class random_profiles_nt:
    def __init__(self):
        """create random profiles and stored it in a named tuple"""
        self.profiles = namedtuple('profiles',fake.profile().keys())
        self.group = namedtuple('group',['profiles'])

        for i in range(10000):
            p1 = self.profiles(**fake.profile())
            if(i==0):
                self.profiles_nt = self.group(p1)
            else:
                self.profiles_nt += self.group(p1)
    def largest_bloodgroup(self)->tuple:
        """
        find out and 
        returns the most common blood group from the profiles
        """
        blood_group = {}
        for prof in self.profiles_nt:
            bg = prof.blood_group
            if bg not in blood_group:
                 blood_group[bg]=0
            else:
                 blood_group[bg]+=1
        prev_count = 0
        for i in blood_group:
            count = blood_group[i]
            if count>prev_count:
                prev_count = count
                most_bg = i

        return most_bg

    def oldest_person(self):
        """
        find out and 
        returns the oldest person's age from the profiles
        """
        current_year = int(str(datetime.date.today())[:4])
        oldest_year = current_year
        for prof in self.profiles_nt:
            year = int(str(prof.birthdate)[:4])
            if year<oldest_year:
                oldest_year = year
        oldest_person_age = current_year-oldest_year
        return oldest_person_age
    def average_age(self):
        """
        find out and 
        returns the average age from the profiles
        """
        current_year = int(str(datetime.date.today())[:4])
        avg_age = 0
        no = 0
        for prof in self.profiles_nt:
            year = int(str(prof.birthdate)[:4])
            age = current_year - year
            avg_age = (avg_age+age)
            no+=1
        return avg_age/no
    def mean_location(self):
       """
       find out and 
        returns the mean location of the profiles
       """
       mean_x = 0
       mean_y = 0
       no = 0
       for prof in self.profiles_nt:
            x,y = (prof.current_location)
            mean_x,mean_y = (mean_x + x),(mean_y+y)
            no+=1
       return mean_x/no,mean_y/no

r=random_profiles_nt()
print("largest blood group:",r.largest_bloodgroup())
print("oldest person's age:",r.oldest_person())
print("average age:",  r.average_age())
print("mean location:",r.mean_location())

"""**Random Profiles - Dictionary**"""

#2 generate random profiles using faker library. Process the data using dictionary
class random_profiles:
    def __init__(self):
        """create random profiles and stored it in a named tuple"""
        self.profiles=[]
        for i in range(10000):
            self.profiles.append(fake.profile())
    def largest_bloodgroup(self):
        """
        find out and 
        returns the most common blood group from the profiles
        """
        blood_group = {}
        for prof in self.profiles:
            bg = prof['blood_group']
            if bg not in blood_group:
                 blood_group[bg]=0
            else:
                 blood_group[bg]+=1
        prev_count = 0
        for i in blood_group:
            count = blood_group[i]
            if count>prev_count:
                prev_count = count
                most_bg = i

        return most_bg

    def oldest_person(self):
        """
        find out and 
        returns the oldest person's age from the profiles
        """
        current_year = int(str(datetime.date.today())[:4])
        oldest_year = current_year
        for prof in self.profiles:
            year = int(str(prof['birthdate'])[:4])
            if year<oldest_year:
                oldest_year = year
        oldest_person_age = current_year-oldest_year
        return oldest_person_age
    def average_age(self):
        """
        find out and 
        returns the average age from the profiles
        """
        current_year = int(str(datetime.date.today())[:4])
        avg_age = 0
        no = 0
        for prof in self.profiles:
            year = int(str(prof['birthdate'])[:4])
            age = current_year - year
            avg_age = (avg_age+age)
            no+=1
        return avg_age/no
    def mean_location(self):
       """
        find out and 
        returns the mean location of the profiles
       """
       mean_x = 0
       mean_y = 0
       no = 0
       for prof in self.profiles:
            x,y = (prof['current_location'])
            mean_x,mean_y = (mean_x + x),(mean_y+y)
            no+=1
       return mean_x/no,mean_y/no

r=random_profiles()
print("largest blood group:",r.largest_bloodgroup())
print("oldest person's age:",r.oldest_person())
print("average age:",  r.average_age())
print("mean location:",r.mean_location())

#3
def stock_exchange():
    """
    This function is used to generate the stock market data for 100 Companies

    # Returns:
    It returns a Named tuple containing the stocks value of all 100 companies.
    """
    company = namedtuple('company', 'name symbol open high low close')
    
    stocks = namedtuple('company',['stock'] )
    for i in range(100):
        weight =  random.uniform(1,50)
        open_price = random.uniform(10,2000) * weight

        close_price = open_price * random.uniform(0.1,10.15)

        high_value = open_price * random.uniform(0.5,10)
        low_value  = open_price * random.uniform(0.1,0.5)
        
        if high_value < open_price:
            high_value = open_price
        if high_value < close_price:
            high_value = close_price
        if low_value > high_value:
            if high_value>open_price:
                low_value = open_price
            else:
                low_value = close_price
        if(i==0):
            s = company(fake.company(),''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(4)),open_price, high_value, low_value, close_price)
            comp = stocks(s)
        else:
            s= company(fake.company(),''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(4)),open_price, high_value, low_value, close_price)
            comp+=stocks(s)
        
    return comp

print(stock_exchange())

def prove_nt_exec_speed():
  """ find the execution time of the named tuple and dictionary and
  prove that named tuple execution is faster than that"""
  r1=random_profiles_nt()

  start = perf_counter()
  r1.largest_bloodgroup()
  r1.oldest_person()
  r1.average_age()
  r1.mean_location()
  end=perf_counter()
  
  nt_exec_speed = end-start
  print("nt exec time:",nt_exec_speed)
 
  r=random_profiles()
  start = perf_counter()
  r.largest_bloodgroup()
  r.oldest_person()
  r.average_age()
  r.mean_location()
  end=perf_counter()

  dt_exec_speed = end-start
  print("dt exec speed:",dt_exec_speed)


  if nt_exec_speed<dt_exec_speed:
    print("named tuple is faster than dictionary")
  else:
    print("something is wrong")

prove_nt_exec_speed()
